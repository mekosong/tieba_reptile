#!/usr/bin/env node
const Koa = require('koa');
const debug = require('debug')('demo:server');
const app = new Koa();
const views = require('koa-views');
const json = require('koa-json');
const onerror = require('koa-onerror');
const bodyparser = require('koa-bodyparser');
const koaBody = require('koa-body');

const devLogger = require('../lib/devLogger.lib');
const validator = require('../lib/validator.lib');
const http = require('http');
const path = require('path');

const connectDB = require('../lib/connectDB');
const index = require('../server/routes');

process.env.TZ = 'Asia/Shanghai';

process
  .on('uncaughtException', (err) => {
    console.log(err)
  });
(async function () {
  // error handler
  onerror(app);

  await connectDB();

  // 验证器
  validator(app);
// middlewares
  app.use(koaBody({
    multipart: true
  }))
  // app.use(json());
  app.use(devLogger);
  app.use(require('koa-static')(path.join(__dirname, '../public')));

  app.use(views(path.join(__dirname, '../views'), {
    extension: 'pug'
  }));

// logger
  app.use(async (ctx, next) => {
    const start = new Date()
    await next()
    const ms = new Date() - start
    console.log(`${ctx.method} ${ctx.url} - ${ms}ms`)
  });

// routes
  app.use(index.routes(), index.allowedMethods());

// error-handling
  app.on('error', (err, ctx) => {
    console.error('server error', err, ctx)
  });

  /**
   * Get port from environment and store in Express.
   */

  const port = normalizePort(process.env.PORT || '3000');
// app.set('port', port);

  /**
   * Create HTTP server.
   */

  const server = http.createServer(app.callback());

  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);

  /**
   * Normalize a port into a number, string, or false.
   */

  function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
      // named pipe
      return val;
    }

    if (port >= 0) {
      // port number
      return port;
    }

    return false;
  }

  /**
   * Event listener for HTTP server "error" event.
   */

  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  /**
   * Event listener for HTTP server "listening" event.
   */

  function onListening() {
    let addr = server.address();
    let bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    debug('Listening on ' + bind);
    console.log('Listening on ' + bind)
  }
})();






